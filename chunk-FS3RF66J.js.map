{
  "version": 3,
  "sources": ["projects/showcase/src/app/demo/examples/heatmap.component.ts"],
  "sourcesContent": ["import { Component, OnInit } from '@angular/core';\nimport { CircleLayerSpecification } from 'maplibre-gl';\nimport {\n  MapComponent,\n  GeoJSONSourceComponent,\n  LayerComponent,\n} from '@maplibre/ngx-maplibre-gl';\n\n@Component({\n  selector: 'showcase-demo',\n  template: `\n    <mgl-map\n      [style]=\"\n        'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL'\n      \"\n      [zoom]=\"[3]\"\n      [center]=\"[-103.59179687498357, 40.66995747013945]\"\n      [canvasContextAttributes]=\"{preserveDrawingBuffer: true}\"\n    >\n      @if (earthquakes) {\n        <mgl-geojson-source\n          id=\"earthquakes\"\n          [data]=\"earthquakes\"\n          [cluster]=\"true\"\n          [clusterMaxZoom]=\"15\"\n          [clusterRadius]=\"20\"\n        ></mgl-geojson-source>\n        @for (layer of clusterLayers; track layer) {\n          <mgl-layer\n            [id]=\"layer.id\"\n            [type]=\"layer.type\"\n            source=\"earthquakes\"\n            [filter]=\"layer.filter\"\n            [paint]=\"layer.paint\"\n          ></mgl-layer>\n        }\n        <mgl-layer\n          id=\"unclustered-point\"\n          type=\"circle\"\n          source=\"earthquakes\"\n          [filter]=\"['!=', 'cluster', true]\"\n          [paint]=\"{\n            'circle-color': 'rgba(0,255,0,0.5)',\n            'circle-radius': 20,\n            'circle-blur': 1\n          }\"\n        ></mgl-layer>\n      }\n    </mgl-map>\n  `,\n  styleUrls: ['./examples.css'],\n  imports: [MapComponent, GeoJSONSourceComponent, LayerComponent],\n})\nexport class HeatMapComponent implements OnInit {\n  earthquakes: object;\n  clusterLayers: CircleLayerSpecification[];\n\n  async ngOnInit() {\n    this.earthquakes = await import('./earthquakes.geo.json');\n    const layersData: [number, string][] = [\n      [0, 'green'],\n      [20, 'orange'],\n      [200, 'red'],\n    ];\n    this.clusterLayers = layersData.map(\n      (data, index) =>\n        ({\n          type: 'circle',\n          id: `cluster-${index}`,\n          paint: {\n            /* eslint-disable @typescript-eslint/naming-convention */\n            'circle-color': data[1],\n            'circle-radius': 70,\n            'circle-blur': 1,\n            /* eslint-enable @typescript-eslint/naming-convention */\n          },\n          filter:\n            index === layersData.length - 1\n              ? ['>=', 'point_count', data[0]]\n              : [\n                  'all',\n                  ['>=', 'point_count', data[0]],\n                  ['<', 'point_count', layersData[index + 1][0]],\n                ],\n        } as CircleLayerSpecification)\n    );\n  }\n}\n"],
  "mappings": "ybA4BUA,EAAA,EAAA,YAAA,CAAA,yBACEC,EAAA,KAAAC,EAAAC,EAAA,EAAe,OAAAD,EAAAE,IAAA,EACI,SAAAF,EAAAG,MAAA,EAEI,QAAAH,EAAAI,KAAA,4BAZ3BN,EAAA,EAAA,qBAAA,CAAA,EAOAO,EAAA,EAAAC,EAAA,EAAA,EAAA,YAAA,EAAAC,CAAA,EASAT,EAAA,EAAA,YAAA,CAAA,kBAdEC,EAAA,OAAAS,EAAAC,WAAA,EAAoB,UAAA,EAAA,EACJ,iBAAA,EAAA,EACK,gBAAA,EAAA,EAGvBC,EAAA,EAAAC,EAAAH,EAAAI,aAAA,EAaEF,EAAA,CAAA,EAAAX,EAAA,SAAAc,EAAA,EAAAC,CAAA,CAAA,EAAkC,QAAAD,EAAA,EAAAE,CAAA,CAAA,GAa5C,IAAaC,GAAgB,IAAA,CAAvB,MAAOA,CAAgB,CAI3B,MAAMC,UAAQ,CACZ,KAAKR,YAAc,KAAM,QAAO,qBAAwB,EACxD,IAAMS,EAAiC,CACrC,CAAC,EAAG,OAAO,EACX,CAAC,GAAI,QAAQ,EACb,CAAC,IAAK,KAAK,CAAC,EAEd,KAAKN,cAAgBM,EAAWC,IAC9B,CAACC,EAAMC,KACJ,CACCnB,KAAM,SACND,GAAI,WAAWoB,CAAK,GACpBjB,MAAO,CAEL,eAAgBgB,EAAK,CAAC,EACtB,gBAAiB,GACjB,cAAe,GAGjBjB,OACEkB,IAAUH,EAAWI,OAAS,EAC1B,CAAC,KAAM,cAAeF,EAAK,CAAC,CAAC,EAC7B,CACE,MACA,CAAC,KAAM,cAAeA,EAAK,CAAC,CAAC,EAC7B,CAAC,IAAK,cAAeF,EAAWG,EAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,GAE1B,CAEpC,iDAjCWL,EAAgB,CAAA,+BAAhBA,EAAgBO,UAAA,CAAA,CAAA,eAAA,CAAA,EAAAC,MAAA,EAAAC,KAAA,GAAAC,OAAA,CAAA,CAAA,EAAA,OAAA,SAAA,yBAAA,EAAA,CAAA,KAAA,cAAA,EAAA,OAAA,UAAA,iBAAA,eAAA,EAAA,CAAA,SAAA,cAAA,EAAA,KAAA,OAAA,SAAA,OAAA,EAAA,CAAA,KAAA,oBAAA,OAAA,SAAA,SAAA,cAAA,EAAA,SAAA,OAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,IA1CzBE,EAAA,EAAA,UAAA,CAAA,EAQEC,EAAA,EAAAC,EAAA,EAAA,CAAA,EA6BFC,EAAA,SApCEC,EAAA,wFAAA,EAGAnC,EAAA,OAAAc,EAAA,EAAAsB,CAAA,CAAA,EAAY,SAAAC,EAAA,EAAAC,EAAA,mBAAA,CAAA,EACuC,0BAAAxB,EAAA,EAAAyB,CAAA,CAAA,EAGnD5B,EAAA,EAAA6B,EAAAV,EAAApB,YAAA,EAAA,EAAA,kBAgCM+B,EAAcC,EAAwBC,CAAc,EAAAC,OAAA,CAAA;kDAAA,CAAA,CAAA,CAAA,SAEnD3B,CAAgB,GAAA",
  "names": ["\u0275\u0275element", "\u0275\u0275property", "layer_r1", "id", "type", "filter", "paint", "\u0275\u0275repeaterCreate", "HeatMapComponent_Conditional_1_For_2_Template", "\u0275\u0275repeaterTrackByIdentity", "ctx_r1", "earthquakes", "\u0275\u0275advance", "\u0275\u0275repeater", "clusterLayers", "\u0275\u0275pureFunction0", "_c3", "_c4", "HeatMapComponent", "ngOnInit", "layersData", "map", "data", "index", "length", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275template", "HeatMapComponent_Conditional_1_Template", "\u0275\u0275elementEnd", "\u0275\u0275styleMap", "_c0", "\u0275\u0275pureFunction1", "_c1", "_c2", "\u0275\u0275conditional", "MapComponent", "GeoJSONSourceComponent", "LayerComponent", "styles"]
}
