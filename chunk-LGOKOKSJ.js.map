{
  "version": 3,
  "sources": ["projects/showcase/src/app/demo/examples/cluster-html.component.ts"],
  "sourcesContent": ["import { Component, OnInit, input } from '@angular/core';\nimport type {\n  CircleLayerSpecification,\n  SymbolLayerSpecification,\n  ExpressionSpecification,\n  GeoJSONSourceSpecification,\n  MapGeoJSONFeature\n} from 'maplibre-gl';\nimport { NgStyle } from '@angular/common';\nimport {\n  MapComponent,\n  LayerComponent,\n  MarkersForClustersComponent,\n  GeoJSONSourceComponent,\n  ClusterPointDirective\n} from '@maplibre/ngx-maplibre-gl';\n\n@Component({\n  selector: 'showcase-cluster-point',\n  template: `\n    <svg\n      [attr.width]=\"w\"\n      [attr.height]=\"w\"\n      [attr.viewbox]=\"viewbox\"\n      text-anchor=\"middle\"\n      [ngStyle]=\"{ font: font }\"\n    >\n      @for (segment of segments; track segment) {\n      <path [attr.d]=\"segment.d\" [ngStyle]=\"{ fill: segment.fill }\" />\n      }\n      <circle [attr.cx]=\"r\" [attr.cy]=\"r\" [attr.r]=\"r0\" fill=\"white\" />\n      <text dominant-baseline=\"central\" [attr.transform]=\"textTransform\">\n        {{ totalString }}\n      </text>\n    </svg>\n  `,\n  imports: [NgStyle],\n})\nexport class ClusterPointComponent implements OnInit {\n  readonly properties = input<MapGeoJSONFeature['properties']>();\n\n  w: number;\n  r: number;\n  r0: number;\n  viewbox: string;\n  font: string;\n  segments: { d: string; fill: string }[];\n  textTransform: string;\n  totalString: string;\n\n  ngOnInit() {\n    const offsets = [];\n    const properties = this.properties();\n\n    const counts = [\n      properties?.mag1,\n      properties?.mag2,\n      properties?.mag3,\n      properties?.mag4,\n      properties?.mag5,\n    ];\n    let total = 0;\n    for (let i = 0; i < counts.length; i++) {\n      offsets.push(total);\n      total += counts[i];\n    }\n    const fontSize =\n      total >= 1000 ? 22 : total >= 100 ? 20 : total >= 10 ? 18 : 16;\n    this.font = `${fontSize}px sans-serif`;\n    this.r = total >= 1000 ? 50 : total >= 100 ? 32 : total >= 10 ? 24 : 18;\n    this.r0 = Math.round(this.r * 0.6);\n    this.w = this.r * 2;\n    this.viewbox = `0 0 ${this.w} ${this.w}`;\n    this.textTransform = `translate(${this.r}, ${this.r})`;\n    this.segments = [];\n    for (let i = 0; i < counts.length; i++) {\n      this.segments.push(\n        this.donutSegment(\n          offsets[i] / total,\n          (offsets[i] + counts[i]) / total,\n          COLORS[i]\n        )\n      );\n    }\n    this.totalString = total.toLocaleString();\n  }\n\n  private donutSegment(start: number, end: number, color: string) {\n    if (end - start === 1) {\n      end -= 0.00001;\n    }\n    const a0 = 2 * Math.PI * (start - 0.25);\n    const a1 = 2 * Math.PI * (end - 0.25);\n    const x0 = Math.cos(a0),\n      y0 = Math.sin(a0);\n    const x1 = Math.cos(a1),\n      y1 = Math.sin(a1);\n    const largeArc = end - start > 0.5 ? 1 : 0;\n    return {\n      d: `M ${this.r + this.r0 * x0} ${this.r + this.r0 * y0} L ${\n        this.r + this.r * x0\n      } ${this.r + this.r * y0} A ${this.r} ${this.r} 0 ${largeArc} 1 ${\n        this.r + this.r * x1\n      } ${this.r + this.r * y1} L ${this.r + this.r0 * x1} ${\n        this.r + this.r0 * y1\n      } A ${this.r0} ${this.r0} 0 ${largeArc} 0 ${this.r + this.r0 * x0} ${\n        this.r + this.r0 * y0\n      }`,\n      fill: color,\n    };\n  }\n}\n\n/**\n * Remember: mgl-layer are way faster than html markers\n * Html markers are fine if you don't have lots of points\n * Try to draw your point with a mgl-layer before using html markers\n * This example only use html markers for cluster points\n * Look at ngx-cluster-html example if you need markers for all points\n */\n\n// colors to use for the categories\nconst COLORS = ['#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c'];\n\n@Component({\n  selector: 'showcase-demo',\n  template: `\n    <mgl-map\n      [style]=\"\n        'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL'\n      \"\n      [zoom]=\"[0.3]\"\n      [center]=\"[0, 20]\"\n      [canvasContextAttributes]=\"{preserveDrawingBuffer: true}\"\n    >\n      <mgl-geojson-source\n        id=\"earthquakes\"\n        data=\"https://maplibre.org/maplibre-gl-js/docs/assets/earthquakes.geojson\"\n        [cluster]=\"true\"\n        [clusterRadius]=\"80\"\n        [clusterProperties]=\"clusterProperties\"\n      ></mgl-geojson-source>\n      <mgl-markers-for-clusters source=\"earthquakes\">\n        <ng-template mglClusterPoint let-feature>\n          <showcase-cluster-point\n            [properties]=\"feature.properties\"\n          ></showcase-cluster-point>\n        </ng-template>\n      </mgl-markers-for-clusters>\n      <mgl-layer\n        id=\"earthquake_circle\"\n        type=\"circle\"\n        source=\"earthquakes\"\n        [filter]=\"['!=', 'cluster', true]\"\n        [paint]=\"circlePaint\"\n      ></mgl-layer>\n      <mgl-layer\n        id=\"earthquake_label\"\n        type=\"symbol\"\n        source=\"earthquakes\"\n        [filter]=\"['!=', 'cluster', true]\"\n        [layout]=\"labelLayout\"\n        [paint]=\"labelPaint\"\n      ></mgl-layer>\n    </mgl-map>\n  `,\n  styleUrls: ['./examples.css'],\n  imports: [\n    MapComponent,\n    GeoJSONSourceComponent,\n    MarkersForClustersComponent,\n    ClusterPointDirective,\n    ClusterPointComponent,\n    LayerComponent,\n  ],\n})\nexport class ClusterHtmlComponent {\n  clusterProperties: GeoJSONSourceSpecification['clusterProperties'];\n  circlePaint: CircleLayerSpecification['paint'];\n  labelLayout: SymbolLayerSpecification['layout'];\n  labelPaint: SymbolLayerSpecification['paint'];\n\n  constructor() {\n    // filters for classifying earthquakes into five categories based on magnitude\n    const mag1 = ['<', ['get', 'mag'], 2] as ExpressionSpecification;\n    const mag2 = [\n      'all',\n      ['>=', ['get', 'mag'], 2],\n      ['<', ['get', 'mag'], 3],\n    ] as ExpressionSpecification;\n    const mag3 = [\n      'all',\n      ['>=', ['get', 'mag'], 3],\n      ['<', ['get', 'mag'], 4],\n    ] as ExpressionSpecification;\n    const mag4 = [\n      'all',\n      ['>=', ['get', 'mag'], 4],\n      ['<', ['get', 'mag'], 5],\n    ] as ExpressionSpecification;\n    const mag5 = ['>=', ['get', 'mag'], 5];\n\n    this.clusterProperties = {\n      // keep separate counts for each magnitude category in a cluster\n      mag1: ['+', ['case', mag1, 1, 0]],\n      mag2: ['+', ['case', mag2, 1, 0]],\n      mag3: ['+', ['case', mag3, 1, 0]],\n      mag4: ['+', ['case', mag4, 1, 0]],\n      mag5: ['+', ['case', mag5, 1, 0]],\n    };\n    this.circlePaint = {\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      'circle-color': [\n        'case',\n        mag1,\n        COLORS[0],\n        mag2,\n        COLORS[1],\n        mag3,\n        COLORS[2],\n        mag4,\n        COLORS[3],\n        COLORS[4],\n      ],\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      'circle-opacity': 0.6,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      'circle-radius': 12,\n    };\n    this.labelLayout = {\n      // typings issue\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      'text-field': [\n        'number-format',\n        ['get', 'mag'],\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        { 'min-fraction-digits': 1, 'max-fraction-digits': 1 },\n      ],\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      'text-size': 10,\n    };\n    this.labelPaint = {\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      'text-color': ['case', ['<', ['get', 'mag'], 3], 'black', 'white'],\n    };\n  }\n}\n"],
  "mappings": "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",
  "names": ["\u0275\u0275element", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c1", "segment_r1", "fill", "feature_r1", "properties", "ClusterPointComponent", "constructor", "input", "ngOnInit", "offsets", "counts", "mag1", "mag2", "mag3", "mag4", "mag5", "total", "i", "length", "push", "fontSize", "font", "r", "r0", "Math", "round", "w", "viewbox", "textTransform", "segments", "donutSegment", "COLORS", "totalString", "toLocaleString", "start", "end", "color", "a0", "PI", "a1", "x0", "cos", "y0", "sin", "x1", "y1", "largeArc", "d", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275repeaterCreate", "ClusterPointComponent_For_2_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275text", "\u0275\u0275elementEnd", "_c0", "\u0275\u0275advance", "\u0275\u0275repeater", "\u0275\u0275textInterpolate1", "NgStyle", "encapsulation", "ClusterHtmlComponent", "clusterProperties", "circlePaint", "labelLayout", "labelPaint", "\u0275\u0275template", "ClusterHtmlComponent_ng_template_3_Template", "\u0275\u0275styleMap", "\u0275\u0275pureFunction0", "_c2", "_c3", "_c4", "_c5", "MapComponent", "GeoJSONSourceComponent", "MarkersForClustersComponent", "ClusterPointDirective", "LayerComponent", "styles"]
}
