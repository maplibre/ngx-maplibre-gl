{
  "version": 3,
  "sources": ["projects/showcase/src/app/demo/examples/add-image-generated.component.ts"],
  "sourcesContent": ["import { Component, OnInit } from '@angular/core';\nimport {\n  MapComponent,\n  ImageComponent,\n  LayerComponent,\n} from '@maplibre/ngx-maplibre-gl';\n\n@Component({\n  selector: 'showcase-demo',\n  template: `\n    <mgl-map\n      [style]=\"\n        'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL'\n      \"\n      [canvasContextAttributes]=\"{preserveDrawingBuffer: true}\"\n    >\n      <mgl-image\n        id=\"gradient\"\n        [data]=\"{\n          width: 64,\n          height: 64,\n          data: imageData\n        }\"\n      >\n      </mgl-image>\n      <mgl-layer\n        id=\"points\"\n        type=\"symbol\"\n        [source]=\"{\n          type: 'geojson',\n          data: {\n            type: 'FeatureCollection',\n            features: [\n              {\n                type: 'Feature',\n                geometry: {\n                  type: 'Point',\n                  coordinates: [0, 0]\n                }\n              }\n            ]\n          }\n        }\"\n        [layout]=\"{ 'icon-image': 'gradient' }\"\n      >\n      </mgl-layer>\n    </mgl-map>\n  `,\n  styleUrls: ['./examples.css'],\n  imports: [MapComponent, ImageComponent, LayerComponent],\n})\nexport class AddImageGeneratedComponent implements OnInit {\n  imageData: Uint8Array;\n\n  ngOnInit() {\n    this.imageData = this.generateImage();\n  }\n\n  private generateImage() {\n    const width = 64; // The image will be 64 pixels square\n    const bytesPerPixel = 4; // Each pixel is represented by 4 bytes: red, green, blue, and alpha.\n    const data = new Uint8Array(width * width * bytesPerPixel);\n\n    for (let x = 0; x < width; x++) {\n      for (let y = 0; y < width; y++) {\n        const offset = (y * width + x) * bytesPerPixel;\n        data[offset + 0] = (y / width) * 255; // red\n        data[offset + 1] = (x / width) * 255; // green\n        data[offset + 2] = 128; // blue\n        data[offset + 3] = 255; // alpha\n      }\n    }\n    return data;\n  }\n}\n"],
  "mappings": "+cAmDaA,GAA0B,IAAA,CAAjC,MAAOA,CAA0B,CAGrCC,UAAQ,CACN,KAAKC,UAAY,KAAKC,cAAa,CACrC,CAEQA,eAAa,CAGnB,IAAMC,EAAO,IAAIC,WAAWC,KAA6B,EAEzD,QAASC,EAAI,EAAGA,EAAID,GAAOC,IACzB,QAASC,EAAI,EAAGA,EAAIF,GAAOE,IAAK,CAC9B,IAAMC,GAAUD,EAAIF,GAAQC,GAAKG,EACjCN,EAAKK,EAAS,CAAC,EAAKD,EAAIF,GAAS,IACjCF,EAAKK,EAAS,CAAC,EAAKF,EAAID,GAAS,IACjCF,EAAKK,EAAS,CAAC,EAAI,IACnBL,EAAKK,EAAS,CAAC,EAAI,GACrB,CAEF,OAAOL,CACT,iDAtBWJ,EAA0B,CAAA,+BAA1BA,EAA0BW,UAAA,CAAA,CAAA,eAAA,CAAA,EAAAC,MAAA,EAAAC,KAAA,GAAAC,OAAA,CAAA,CAAA,EAAA,yBAAA,EAAA,CAAA,KAAA,WAAA,EAAA,MAAA,EAAA,CAAA,KAAA,SAAA,OAAA,SAAA,EAAA,SAAA,QAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,IAzCnCE,EAAA,EAAA,UAAA,CAAA,EAMEC,EAAA,EAAA,YAAA,CAAA,EAQY,EAAA,YAAA,CAAA,EAsBdC,EAAA,SAnCEC,EAAA,wFAAA,EAGAC,EAAA,0BAAAC,EAAA,EAAAC,CAAA,CAAA,EAIEC,EAAA,EAAAH,EAAA,OAAAI,EAAA,EAAAC,EAAAV,EAAAf,SAAA,CAAA,EAUAuB,EAAA,EAAAH,EAAA,SAAAI,EAAA,GAAAE,EAAAF,EAAA,GAAAG,EAAAH,EAAA,GAAAI,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,GAAAM,EAAAT,EAAA,EAAAU,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAcE,SAAAV,EAAA,GAAAW,CAAA,CAAA,kBAOEC,EAAcC,EAAgBC,CAAc,EAAAC,OAAA,CAAA;kDAAA,CAAA,CAAA,CAAA,SAE3CtC,CAA0B,GAAA",
  "names": ["AddImageGeneratedComponent", "ngOnInit", "imageData", "generateImage", "data", "Uint8Array", "width", "x", "y", "offset", "bytesPerPixel", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275styleMap", "\u0275\u0275property", "\u0275\u0275pureFunction0", "_c0", "\u0275\u0275advance", "\u0275\u0275pureFunction1", "_c1", "_c7", "_c6", "_c5", "_c4", "_c3", "_c2", "_c8", "MapComponent", "ImageComponent", "LayerComponent", "styles"]
}
